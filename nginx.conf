events {}

http {
    # Define the shared memory zone for rate limiting
    limit_req_zone $binary_remote_addr zone=req_limit_per_ip:10m rate=5r/s;

    # Define the shared memory zone for connection limiting
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;

    upstream auth_service_upstream {
        # Load balancing across the auth-service replicas
        random;
        server microservices-payment-gateway-auth-service-1:4000;
        server microservices-payment-gateway-auth-service-2:4000;
        server microservices-payment-gateway-auth-service-3:4000;
    }

    upstream transaction_service_upstream {
        # Load balancing across the transaction-service replicas
        random;
        server microservices-payment-gateway-transaction-service-1:5000;
        server microservices-payment-gateway-transaction-service-2:5000;
        server microservices-payment-gateway-transaction-service-3:5000;
    }

    server {
        listen 8081 ssl;
        server_name localhost;

        # ssl config
        ssl_certificate /etc/nginx/ssl/server.crt;
        ssl_certificate_key /etc/nginx/ssl/server.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:...';  # Strong ciphers
        ssl_prefer_server_ciphers on;

        location /api/auth {

            proxy_pass http://auth_service_upstream;  # Pass incoming requests to the auth service
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /api/transaction {
            
            proxy_pass http://transaction_service_upstream;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Catch-all for any other requests (optional)
        location / {
            return 404; # Or redirect to a landing page
        }
    } 
}
